services:
  web-app:
    build: .
    ports:
      - "8000:8000"

    # Монтируем корень проекта в /app
    volumes:
      - ./:/app

    # Говорим Docker, что будем работать в /app
    working_dir: /app

    # Подхватываем .env и пробрасываем её внутрь контейнера
    env_file:
      - .env
    command: >
      sh -c "
        echo 'Waiting for database…';
        echo POSTGRES_HOST=$POSTGRES_HOST POSTGRES_DB=$POSTGRES_DB POSTGRES_USER=$POSTGRES_USER;
        until pg_isready -h \"$POSTGRES_HOST\" -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\"; do
          echo '  still waiting…' && sleep 2;
        done;
        echo 'Database is up — starting Django';
        python manage.py runserver 0.0.0.0:8000
      "

  database:
    image: postgres:14.6-alpine
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h \"$POSTGRES_HOST\""]
      interval: 5s
      timeout: 5s
      retries: 5

    volumes:
      - postgres_data:/var/lib/postgresql/data
  bot:
    build:
      context: .
    env_file:
      - .env
    restart: always
    depends_on:
      - database
      - rabbit
    volumes:
      - ./:/app
    command: >
      sh -c "\
        echo \"Waiting for RabbitMQ...\"; \
        while ! nc -z rabbit 5672; do \
          echo \"RabbitMQ is unavailable - sleeping\"; \
          sleep 2; \
        done; \
        echo \"RabbitMQ is up - starting bot\"; \
        python bot.py\
      "

  rabbit:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    environment:

      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}

volumes:
  postgres_data:
